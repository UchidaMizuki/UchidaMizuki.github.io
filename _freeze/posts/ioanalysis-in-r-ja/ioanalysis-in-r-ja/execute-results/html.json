{
  "hash": "d0f8c73b6a28ecdefca8096c2f46ddcb",
  "result": {
    "markdown": "---\ntitle: \"🗾Rで産業連関分析\"\nlang: ja\ndate: \"2022-05-31\"\ncategories: [ioanalysis, R, Japanese]\n---\n\n\n産業連関分析は，経済波及効果の算出に広く用いられている分析手法です．\n日本では，国や都道府県によって，約5年に1度，産業連関表と呼ばれる統計データが\n作成・公開されており，産業連関分析における基礎データとなっています．\n\nこれまで，産業連関分析では，Excel・VBAが用いられることが多かったようです．\n\n一方で，近年は，Python・R・Juliaなどのプログラミング言語の普及が進んでいます．\nこれらのプログラミング言語は以下のような特長を持っています．\n\n- 無料で利用することができる\n- 作業の再現性が高まりミスが修正しやすい・他者がミスに気づきやすい\n- 高度な分析手法が簡単に利用できる\n\nそのため今後は，産業連関分析においても，これらのプログラミング言語の利用が\n進むのではないかと思われます．\n\nここでは，Rを用いて産業連関分析を行います．\nRでは近年，tidyverseなどモダンなデータ分析を行うためのパッケージが\n多く提供されており，プログラミング初心者でも習得しやすい言語であると思います．\n\n産業連関表として，e-Statのデータベースで公開されている日本（国）の\n2013年・13部門産業連関表を用います．\nここで使用するデータは，\n[こちら](https://github.com/UchidaMizuki/blog-ioanalysis-in-r)\nからダウンロードできます．\n\n\n\n## 分析の流れ\n\n一般的な産業連関分析の流れは以下の通りです．\n\n1. 産業連関表の整形\n1. 投入係数行列の算出\n1. レオンチェフ逆行列の算出\n1. 経済波及効果の算出\n\n以上の流れに沿って，Rによる産業連関分析の計算例を示します．\n\n\n\n## Rによる産業連関分析\n### 産業連関表の整形\n\nここでは，\n[こちら](https://github.com/UchidaMizuki/blog-ioanalysis-in-r)\nからダウンロードできる日本の2011年の3部門表（`iotable_3sector_2011_wider.csv`）を\n使用します．\n\nこちらの表は，以下のように，日本の2011年の13部門表より作成したものです．\n\n* 13部門の産業分類を第1次・第2次・第3次産業に集計\n* 付加価値部門は1部門に集計\n* 最終需要部門は域内最終需要（`finaldemand`）・輸出（`export`）・輸入（`import`）の3部門に集計\n\n産業連関表のデータ形式は，e-Statのデータベースで提供されている表などを除いて，\n行に投入部門（`input`）・列に産出部門（`output`）を持つ「横長データ」であることが多いと思われます．\n\nここでも，以下の通り，まずは横長の産業連関表データを読み込みます．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\niotable_wider <- read_csv(\"iotable_3sector_2011_wider.csv\",\n                          col_types = cols(.default = \"c\")) |> \n  mutate(across(-1, parse_number))\n\nknitr::kable(iotable_wider)\n```\n\n::: {.cell-output-display}\n|input                    | industry/01_primary| industry/02_secondary| industry/03_tertiary| finaldemand/04_finaldemand| export/05_export| import/06_import|\n|:------------------------|-------------------:|---------------------:|--------------------:|--------------------------:|----------------:|----------------:|\n|industry/01_primary      |             1456611|               7850628|              1373767|                    3869875|            47890|         -2562809|\n|industry/02_secondary    |             2715710|             161897553|             62841827|                  132924323|         54473273|        -71673715|\n|industry/03_tertiary     |             2025270|              66811645|            155796589|                  352324555|         16423417|         -8921553|\n|valueadded/04_valueadded |             5838371|             106619145|            364447740|                         NA|               NA|               NA|\n:::\n:::\n\n\nデータ分析においては，「横長データ」よりも，以下のような「縦長データ」のほうが，\n分析しやすい場合が多くあります．\nここでも，横長の産業連関表を「縦長データ」に変換します．\n\n\n::: {.cell}\n\n```{.r .cell-code}\niotable <- iotable_wider |>\n  separate(input, c(\"input_type\", \"input_name\"),\n           sep = \"/\") |>\n  pivot_longer(!c(input_type, input_name),\n               names_to = c(\"output_type\", \"output_name\"),\n               names_sep = \"/\",\n               values_to = \"value_M\") |>\n  drop_na(value_M)\n\nknitr::kable(iotable)\n```\n\n::: {.cell-output-display}\n|input_type |input_name    |output_type |output_name    |   value_M|\n|:----------|:-------------|:-----------|:--------------|---------:|\n|industry   |01_primary    |industry    |01_primary     |   1456611|\n|industry   |01_primary    |industry    |02_secondary   |   7850628|\n|industry   |01_primary    |industry    |03_tertiary    |   1373767|\n|industry   |01_primary    |finaldemand |04_finaldemand |   3869875|\n|industry   |01_primary    |export      |05_export      |     47890|\n|industry   |01_primary    |import      |06_import      |  -2562809|\n|industry   |02_secondary  |industry    |01_primary     |   2715710|\n|industry   |02_secondary  |industry    |02_secondary   | 161897553|\n|industry   |02_secondary  |industry    |03_tertiary    |  62841827|\n|industry   |02_secondary  |finaldemand |04_finaldemand | 132924323|\n|industry   |02_secondary  |export      |05_export      |  54473273|\n|industry   |02_secondary  |import      |06_import      | -71673715|\n|industry   |03_tertiary   |industry    |01_primary     |   2025270|\n|industry   |03_tertiary   |industry    |02_secondary   |  66811645|\n|industry   |03_tertiary   |industry    |03_tertiary    | 155796589|\n|industry   |03_tertiary   |finaldemand |04_finaldemand | 352324555|\n|industry   |03_tertiary   |export      |05_export      |  16423417|\n|industry   |03_tertiary   |import      |06_import      |  -8921553|\n|valueadded |04_valueadded |industry    |01_primary     |   5838371|\n|valueadded |04_valueadded |industry    |02_secondary   | 106619145|\n|valueadded |04_valueadded |industry    |03_tertiary    | 364447740|\n:::\n:::\n\n\n上で構築した表データは，各行のフィルタリングなどが容易にできる一方で，\n産業連関分析に用いられる行列計算などに適していません．\n\nそこで，表データの見た目のまま行列計算を行えるdibbleパッケージを用います．\n以下では，産業連関表をdibbleに変換しています．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dibble)\n\niotable <- iotable |>\n  dibble_by(input = c(input_type, input_name),\n            output = c(output_type, output_name),\n            .names_sep = \"_\")\n\niotable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A dibble:   24 x 1\n# Dimensions: input [4], output [6]\n# Measures:   value_M\n   input$type $name        output$type $name            value_M\n   <chr>      <chr>        <chr>       <chr>              <dbl>\n 1 industry   01_primary   industry    01_primary       1456611\n 2 industry   01_primary   industry    02_secondary     7850628\n 3 industry   01_primary   industry    03_tertiary      1373767\n 4 industry   01_primary   finaldemand 04_finaldemand   3869875\n 5 industry   01_primary   export      05_export          47890\n 6 industry   01_primary   import      06_import       -2562809\n 7 industry   02_secondary industry    01_primary       2715710\n 8 industry   02_secondary industry    02_secondary   161897553\n 9 industry   02_secondary industry    03_tertiary     62841827\n10 industry   02_secondary finaldemand 04_finaldemand 132924323\n# … with 14 more rows\n```\n:::\n:::\n\n\n### 投入係数行列の算出\n\n投入係数は以下のように表される．\n\n\n$$\na_{ij}=\\frac{x_{ij}}{X_j}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_input <- iotable |>\n  filter(output$type == \"industry\") |>\n  apply(\"output\", sum)\n\ninterindustry <- iotable |>\n  filter(input$type == \"industry\",\n         output$type == \"industry\")\n\ninputcoeff <- broadcast(interindustry / total_input,\n                        c(\"input\", \"output\"))\n\ninputcoeff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A dibble:   9\n# Dimensions: input [3], output [3]\n  input$type $name        output$type $name              .\n  <chr>      <chr>        <chr>       <chr>          <dbl>\n1 industry   01_primary   industry    01_primary   0.121  \n2 industry   01_primary   industry    02_secondary 0.0229 \n3 industry   01_primary   industry    03_tertiary  0.00235\n4 industry   02_secondary industry    01_primary   0.226  \n5 industry   02_secondary industry    02_secondary 0.472  \n6 industry   02_secondary industry    03_tertiary  0.108  \n7 industry   03_tertiary  industry    01_primary   0.168  \n8 industry   03_tertiary  industry    02_secondary 0.195  \n9 industry   03_tertiary  industry    03_tertiary  0.267  \n```\n:::\n:::\n\n\n\n\n### レオンチェフ逆行列の算出\n\n\n$$\n[I-(I-M)A]^{-1}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nlocaloutput <- iotable |>\n  filter(input$type == \"industry\",\n         !output$type %in% c(\"export\", \"import\")) |>\n  apply(\"input\", sum)\n\nimport <- iotable |>\n  filter(input$type == \"industry\",\n         output$type == \"import\") |>\n  apply(\"input\", sum)\nimport <- -import\n\nimportcoeff <- import / localoutput\n\nI <- eye(inputcoeff)\nM <- importcoeff\nA <- inputcoeff\n\nleontiefinv <- broadcast(I - (1 - M) * A,\n                         c(\"input\", \"output\")) |>\n  solve()\n\nleontiefinv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A dibble:   9\n# Dimensions: output [3], input [3]\n  output$type $name        input$type $name              .\n  <chr>       <chr>        <chr>      <chr>          <dbl>\n1 industry    01_primary   industry   01_primary   1.12   \n2 industry    01_primary   industry   02_secondary 0.0361 \n3 industry    01_primary   industry   03_tertiary  0.00716\n4 industry    02_secondary industry   01_primary   0.374  \n5 industry    02_secondary industry   02_secondary 1.68   \n6 industry    02_secondary industry   03_tertiary  0.197  \n7 industry    03_tertiary  industry   01_primary   0.348  \n8 industry    03_tertiary  industry   02_secondary 0.445  \n9 industry    03_tertiary  industry   03_tertiary  1.41   \n```\n:::\n:::\n\n\n### 経済波及効果の算出\n\nTODO\n\n## まとめ\n\nTODO",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}